<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CS2TraceRay</name>
    </assembly>
    <members>
        <member name="T:CS2TraceRay.Class.CTraceHitbox">
            <summary>
            Represents trace hitbox information including hit group and hitbox ID.
            </summary>
        </member>
        <member name="F:CS2TraceRay.Class.CTraceHitbox.HitGroup">
            <summary>
            The hit group that was hit by the trace.
            Common values:
            0 = Generic
            1 = Head
            2 = Chest
            3 = Stomach
            4 = Left Arm
            5 = Right Arm
            6 = Left Leg
            7 = Right Leg
            </summary>
        </member>
        <member name="F:CS2TraceRay.Class.CTraceHitbox.HitboxId">
            <summary>
            The specific hitbox ID that was hit by the trace.
            Hitbox IDs are model-specific and correspond to hitboxes defined in the model.
            </summary>
        </member>
        <member name="T:CS2TraceRay.Class.CGameTrace">
            <summary>
            Represents the results of a game trace operation, containing information about what was hit.
            </summary>
        </member>
        <member name="F:CS2TraceRay.Class.CGameTrace.Surface">
            <summary>
            The surface that was hit by the trace.
            </summary>
        </member>
        <member name="F:CS2TraceRay.Class.CGameTrace.HitEntity">
            <summary>
            The entity that was hit by the trace.
            </summary>
        </member>
        <member name="F:CS2TraceRay.Class.CGameTrace.HitboxData">
            <summary>
            Pointer to the hitbox data if a hitbox was hit.
            </summary>
        </member>
        <member name="F:CS2TraceRay.Class.CGameTrace.Contents">
            <summary>
            The contents at the point of impact.
            </summary>
        </member>
        <member name="F:CS2TraceRay.Class.CGameTrace.StartPos">
            <summary>
            The starting position of the trace.
            </summary>
        </member>
        <member name="F:CS2TraceRay.Class.CGameTrace.EndPos">
            <summary>
            The end position of the trace.
            </summary>
        </member>
        <member name="F:CS2TraceRay.Class.CGameTrace.Normal">
            <summary>
            The surface normal at the point of impact.
            </summary>
        </member>
        <member name="F:CS2TraceRay.Class.CGameTrace.Position">
            <summary>
            The exact position where the trace hit.
            </summary>
        </member>
        <member name="F:CS2TraceRay.Class.CGameTrace.Fraction">
            <summary>
            Fraction of the trace completed when the hit occurred (0.0-1.0).
            </summary>
        </member>
        <member name="F:CS2TraceRay.Class.CGameTrace.AllSolid">
            <summary>
            Whether the trace was completely inside a solid (no free space).
            </summary>
        </member>
        <member name="T:CS2TraceRay.Class.GameTraceExtensions">
            <summary>
            Provides extension methods for <see cref="T:CS2TraceRay.Class.CGameTrace"/> class
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.GameTraceExtensions.DidHit(CS2TraceRay.Class.CGameTrace)">
            <summary>
            Determines if the trace hit anything.
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.GameTraceExtensions.Distance(CS2TraceRay.Class.CGameTrace)">
            <summary>
            Gets the distance between the start and end positions of the trace.
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.GameTraceExtensions.Direction(CS2TraceRay.Class.CGameTrace)">
            <summary>
            Gets the normalized direction vector of the trace.
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.GameTraceExtensions.HitEntityByDesignerName``1(CS2TraceRay.Class.CGameTrace,``0@,System.String,CS2TraceRay.Enum.DesignerNameMatchType)">
            <summary>
            Attempts to get the entity of type <typeparamref name="T"/> if the trace hit an entity
            with a designer name matching the specified pattern.
            </summary>
            <typeparam name="T">The type of entity to check for.</typeparam>
            <param name="gametrace">The gametrace</param>
            <param name="entity">The entity that was hit, if any.</param>
            <param name="designerName">The designer name pattern to match.</param>
            <param name="matchType">The type of matching to perform.</param>
            <returns>True if an entity of type <typeparamref name="T"/> matching the pattern was hit, false otherwise.</returns>
        </member>
        <member name="M:CS2TraceRay.Class.GameTraceExtensions.HitPlayer(CS2TraceRay.Class.CGameTrace,CounterStrikeSharp.API.Core.CCSPlayerController@)">
            <summary>
            Attempts to get the player controller if the trace hit a player.
            </summary>
            <param name="gametrace">The gametrace</param>
            <param name="player">The player controller that was hit, if any.</param>
            <returns>True if a player was hit, false otherwise.</returns>
        </member>
        <member name="M:CS2TraceRay.Class.GameTraceExtensions.HitWeapon(CS2TraceRay.Class.CGameTrace,CounterStrikeSharp.API.Core.CBasePlayerWeapon@)">
            <summary>
            Attempts to get the weapon if the trace hit a weapon.
            </summary>
            <param name="gametrace">The gametrace</param>
            <param name="weapon">The weapon that was hit, if any.</param>
            <returns>True if a weapon was hit, false otherwise.</returns>
        </member>
        <member name="M:CS2TraceRay.Class.GameTraceExtensions.HitChicken(CS2TraceRay.Class.CGameTrace,CounterStrikeSharp.API.Core.CChicken@)">
            <summary>
            Attempts to get the chicken if the trace hit a chicken.
            </summary>
            <param name="gametrace">The gametrace</param>
            <param name="chicken">The chicken that was hit, if any.</param>
            <returns>True if a chicken was hit, false otherwise.</returns>
        </member>
        <member name="M:CS2TraceRay.Class.GameTraceExtensions.HitButton(CS2TraceRay.Class.CGameTrace,CounterStrikeSharp.API.Core.CBaseButton@)">
            <summary>
            Attempts to get the button if the trace hit a button.
            </summary>
            <param name="gametrace">The gametrace</param>
            <param name="button">The button that was hit, if any.</param>
            <returns>True if a button was hit, false otherwise.</returns>
        </member>
        <member name="M:CS2TraceRay.Class.GameTraceExtensions.HitBuyzone(CS2TraceRay.Class.CGameTrace,CounterStrikeSharp.API.Core.CBuyZone@)">
            <summary>
            Attempts to get the buyzone if the trace hit a buyzone.
            </summary>
            <param name="gametrace">The gametrace</param>
            <param name="buyzone">The buyzone that was hit, if any.</param>
            <returns>True if a buyzone was hit, false otherwise.</returns>
        </member>
        <member name="M:CS2TraceRay.Class.GameTraceExtensions.HitSky(CS2TraceRay.Class.CGameTrace,CounterStrikeSharp.API.Core.CEnvSky@)">
            <summary>
            Attempts to get the sky if the trace hit the sky.
            </summary>
            <param name="gametrace">The gametrace</param>
            <param name="sky">The sky that was hit, if any.</param>
            <returns>True if the sky was hit, false otherwise.</returns>
        </member>
        <member name="M:CS2TraceRay.Class.GameTraceExtensions.HitDoor(CS2TraceRay.Class.CGameTrace,CounterStrikeSharp.API.Core.CBaseDoor@)">
            <summary>
            Attempts to get the door if the trace hit a door.
            </summary>
            <param name="gametrace">The gametrace</param>
            <param name="door">The door that was hit, if any.</param>
            <returns>True if a door was hit, false otherwise.</returns>
        </member>
        <member name="M:CS2TraceRay.Class.GameTraceExtensions.HitDoor(CS2TraceRay.Class.CGameTrace,CounterStrikeSharp.API.Core.CRotDoor@)">
            <summary>
            Attempts to get the rotating door if the trace hit a rotating door.
            </summary>
            <param name="gametrace">The gametrace</param>
            <param name="door">The rotating door that was hit, if any.</param>
            <returns>True if a rotating door was hit, false otherwise.</returns>
        </member>
        <member name="M:CS2TraceRay.Class.GameTraceExtensions.HitLadder(CS2TraceRay.Class.CGameTrace,CounterStrikeSharp.API.Core.CFuncLadder@)">
            <summary>
            Attempts to get the ladder if the trace hit a ladder.
            </summary>
            <param name="gametrace">The gametrace</param>
            <param name="ladder">The ladder that was hit, if any.</param>
            <returns>True if a ladder was hit, false otherwise.</returns>
        </member>
        <member name="M:CS2TraceRay.Class.GameTraceExtensions.HitGrenade(CS2TraceRay.Class.CGameTrace,CounterStrikeSharp.API.Core.CBaseCSGrenade@)">
            <summary>
            Attempts to get the grenade if the trace hit a grenade.
            </summary>
            <param name="gametrace">The gametrace</param>
            <param name="grenade">The grenade that was hit, if any.</param>
            <returns>True if a grenade was hit, false otherwise.</returns>
        </member>
        <member name="M:CS2TraceRay.Class.GameTraceExtensions.HitPlantedC4(CS2TraceRay.Class.CGameTrace,CounterStrikeSharp.API.Core.CPlantedC4@)">
            <summary>
            Attempts to get the planted C4 if the trace hit a planted C4.
            </summary>
            <param name="gametrace">The gametrace</param>
            <param name="c4">The planted C4 that was hit, if any.</param>
            <returns>True if a planted C4 was hit, false otherwise.</returns>
        </member>
        <member name="M:CS2TraceRay.Class.GameTraceExtensions.HitPointWorldText(CS2TraceRay.Class.CGameTrace,CounterStrikeSharp.API.Core.CPointWorldText@)">
            <summary>
            Attempts to get the world text if the trace hit a point world text.
            </summary>
            <param name="gametrace">The gametrace</param>
            <param name="pointWorldText">The point world text that was hit, if any.</param>
            <returns>True if a point world text was hit, false otherwise.</returns>
        </member>
        <member name="M:CS2TraceRay.Class.GameTraceExtensions.HitC4(CS2TraceRay.Class.CGameTrace,CounterStrikeSharp.API.Core.CC4@)">
            <summary>
            Attempts to get the C4 if the trace hit a C4 weapon.
            </summary>
            <param name="gametrace">The gametrace</param>
            <param name="c4">The C4 weapon that was hit, if any.</param>
            <returns>True if a C4 weapon was hit, false otherwise.</returns>
        </member>
        <member name="M:CS2TraceRay.Class.GameTraceExtensions.HitWorld(CS2TraceRay.Class.CGameTrace,CounterStrikeSharp.API.Core.CWorld@)">
            <summary>
            Attempts to get the world entity if the trace hit the world.
            </summary>
            <param name="gametrace">The gametrace</param>
            <param name="world">The world entity that was hit, if any.</param>
            <returns>True if the world was hit, false otherwise.</returns>
        </member>
        <member name="T:CS2TraceRay.Class.PlayerExtensions">
            <summary>
            Provides extension methods for <see cref="T:CounterStrikeSharp.API.Core.CCSPlayerController"/> and <see cref="T:CounterStrikeSharp.API.Core.CCSPlayerPawn"/> classes
            to support various player-related operations including trace rays and position calculations.
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.PlayerExtensions.GetGameTraceByEyePosition(CounterStrikeSharp.API.Core.CCSPlayerController,CS2TraceRay.Enum.TraceMask,CS2TraceRay.Enum.Contents,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a game trace from the player's eye position in the direction they are looking.
            </summary>
            <param name="player">The player controller to trace from.</param>
            <param name="mask">The trace mask to use for collision detection.</param>
            <param name="contents">The contents flags to filter the trace.</param>
            <param name="skipPlayer">Optional player whose pawn should be ignored in the trace.</param>
            <returns>A <see cref="T:CS2TraceRay.Class.CGameTrace"/> object containing the trace results, or null if the trace couldn't be performed.</returns>
        </member>
        <member name="M:CS2TraceRay.Class.PlayerExtensions.GetGameTraceByEyePosition(CounterStrikeSharp.API.Core.CCSPlayerPawn,CS2TraceRay.Enum.TraceMask,CS2TraceRay.Enum.Contents,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a game trace from the player pawn's eye position in the direction they are looking.
            </summary>
            <param name="playerPawn">The player pawn to trace from.</param>
            <param name="mask">The trace mask to use for collision detection.</param>
            <param name="contents">The contents flags to filter the trace.</param>
            <param name="skipPlayer">Optional player whose pawn should be ignored in the trace.</param>
            <returns>A <see cref="T:CS2TraceRay.Class.CGameTrace"/> object containing the trace results, or null if the trace couldn't be performed.</returns>
        </member>
        <member name="M:CS2TraceRay.Class.PlayerExtensions.GetEyePosition(CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Gets the eye position of the player in world coordinates.
            </summary>
            <param name="player">The player controller to get the eye position from.</param>
            <returns>A <see cref="T:CounterStrikeSharp.API.Modules.Utils.Vector"/> representing the eye position, or null if the position couldn't be determined.</returns>
        </member>
        <member name="M:CS2TraceRay.Class.PlayerExtensions.GetEyePosition(CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Gets the eye position of the player pawn in world coordinates.
            </summary>
            <param name="playerPawn">The player pawn to get the eye position from.</param>
            <returns>A <see cref="T:CounterStrikeSharp.API.Modules.Utils.Vector"/> representing the eye position, or null if the position couldn't be determined.</returns>
        </member>
        <member name="M:CS2TraceRay.Class.PlayerExtensions.GetGroundDistance(CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Gets the vertical distance from the player to the ground below them.
            </summary>
            <param name="player">The player controller to measure from.</param>
            <returns>The distance in units, or 0 if the player is on the ground or the measurement couldn't be taken.</returns>
        </member>
        <member name="M:CS2TraceRay.Class.PlayerExtensions.GetGroundDistance(CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Gets the vertical distance from the player pawn to the ground below them.
            </summary>
            <param name="playerPawn">The player pawn to measure from.</param>
            <returns>The distance in units, or 0 if the player is on the ground or the measurement couldn't be taken.</returns>
        </member>
        <member name="T:CS2TraceRay.Class.TraceRay">
            <summary>
            Provides static methods for performing trace operations in CS2.
            </summary>
            <summary>
            Provides extension methods for <see cref="T:CS2TraceRay.Class.TraceRay"/> class
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,System.UInt64,System.UInt64,System.IntPtr)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask and content flags
            </summary>
            <param name="origin">Starting position of the trace</param>
            <param name="angle">Direction of the trace</param>
            <param name="mask">Trace mask flags as ulong</param>
            <param name="content">Content flags as ulong</param>
            <param name="skip">Entity to skip (IntPtr handle)</param>
            <returns>CGameTrace containing the trace results</returns>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,System.UInt64,System.UInt64,System.IntPtr)">
            <summary>
            Performs a trace from origin to end with specified mask and content flags
            </summary>
            <param name="origin">Starting position of the trace</param>
            <param name="end">Ending position of the trace</param>
            <param name="mask">Trace mask flags as ulong</param>
            <param name="content">Content flags as ulong</param>
            <param name="skip">Entity to skip (IntPtr handle)</param>
            <returns>CGameTrace containing the trace results</returns>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.TraceMask,CS2TraceRay.Enum.Contents,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask and content flags, skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.TraceMask,System.UInt64,System.IntPtr)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask and content flags
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,System.UInt64,CS2TraceRay.Enum.Contents,System.IntPtr)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask and content flags
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.TraceMask,CS2TraceRay.Enum.Contents,System.IntPtr)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask and content flags
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.Contents,System.UInt64,System.IntPtr)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask and content flags
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.Contents,CS2TraceRay.Enum.Contents,System.IntPtr)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask and content flags
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.Contents,System.IntPtr)">
            <summary>
            Performs a trace from origin in the direction of angle with specified content flags
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.TraceMask,System.IntPtr)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask flags
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,System.UInt64,System.IntPtr)">
            <summary>
            Performs a trace from origin in the direction of angle with raw mask value
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.Contents,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin in the direction of angle with specified content flags, skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.TraceMask,System.UInt64,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask and raw content value, skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,System.UInt64,CS2TraceRay.Enum.Contents,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin in the direction of angle with raw mask and content flags, skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.Contents,System.UInt64,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask and raw content value, skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,System.UInt64,System.UInt64,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin in the direction of angle with raw mask and content values, skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.Contents,CS2TraceRay.Enum.Contents,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask and content flags, skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.TraceMask,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask flags, skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,System.UInt64,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin in the direction of angle with raw mask value, skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.TraceMask,CS2TraceRay.Enum.Contents,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask and content flags, skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.Contents,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin in the direction of angle with specified content flags, skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.TraceMask,System.UInt64,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask and raw content value, skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,System.UInt64,CS2TraceRay.Enum.Contents,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin in the direction of angle with raw mask and content flags, skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.Contents,System.UInt64,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask and raw content value, skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,System.UInt64,System.UInt64,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin in the direction of angle with raw mask and content values, skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.Contents,CS2TraceRay.Enum.Contents,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask and content flags, skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.TraceMask,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask flags, skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,System.UInt64,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin in the direction of angle with raw mask value, skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.TraceMask,System.UInt64,System.IntPtr)">
            <summary>
            Performs a trace from origin to end with specified mask and content flags
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,System.UInt64,CS2TraceRay.Enum.Contents,System.IntPtr)">
            <summary>
            Performs a trace from origin to end with raw mask and content flags
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.TraceMask,CS2TraceRay.Enum.Contents,System.IntPtr)">
            <summary>
            Performs a trace from origin to end with specified mask and content flags
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.Contents,System.UInt64,System.IntPtr)">
            <summary>
            Performs a trace from origin to end with specified mask and raw content value
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.Contents,CS2TraceRay.Enum.Contents,System.IntPtr)">
            <summary>
            Performs a trace from origin to end with specified mask and content flags
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.Contents,System.IntPtr)">
            <summary>
            Performs a trace from origin to end with specified content flags
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.TraceMask,System.IntPtr)">
            <summary>
            Performs a trace from origin to end with specified mask flags
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,System.UInt64,System.IntPtr)">
            <summary>
            Performs a trace from origin to end with raw mask value
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.TraceMask,CS2TraceRay.Enum.Contents,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin to end with specified mask and content flags, skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.Contents,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin to end with specified content flags, skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.TraceMask,System.UInt64,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin to end with specified mask and raw content value, skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,System.UInt64,CS2TraceRay.Enum.Contents,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin to end with raw mask and content flags, skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.Contents,System.UInt64,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin to end with specified mask and raw content value, skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,System.UInt64,System.UInt64,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin to end with raw mask and content values, skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.Contents,CS2TraceRay.Enum.Contents,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin to end with specified mask and content flags, skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.TraceMask,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin to end with specified mask flags, skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,System.UInt64,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin to end with raw mask value, skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.TraceMask,CS2TraceRay.Enum.Contents,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin to end with specified mask and content flags, skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.Contents,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin to end with specified content flags, skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.TraceMask,System.UInt64,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin to end with specified mask and raw content value, skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,System.UInt64,CS2TraceRay.Enum.Contents,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin to end with raw mask and content flags, skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.Contents,System.UInt64,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin to end with specified mask and raw content value, skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,System.UInt64,System.UInt64,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin to end with raw mask and content values, skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.Contents,CS2TraceRay.Enum.Contents,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin to end with specified mask and content flags, skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.TraceMask,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin to end with specified mask flags, skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,System.UInt64,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin to end with raw mask value, skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.TraceMask,CS2TraceRay.Enum.TraceMask,System.IntPtr)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask and content flags (both as TraceMask)
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.Contents,CS2TraceRay.Enum.TraceMask,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin to end with specified mask (as Contents) and content (as TraceMask), skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.TraceMask,CS2TraceRay.Enum.TraceMask,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask and content flags (both as TraceMask), skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.Contents,CS2TraceRay.Enum.TraceMask,System.IntPtr)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask (as Contents) and content (as TraceMask)
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.TraceMask,CS2TraceRay.Enum.TraceMask,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask and content flags (both as TraceMask), skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.Contents,CS2TraceRay.Enum.TraceMask,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask (as Contents) and content (as TraceMask), skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.QAngle,CS2TraceRay.Enum.Contents,CS2TraceRay.Enum.TraceMask,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin in the direction of angle with specified mask (as Contents) and content (as TraceMask), skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.TraceMask,CS2TraceRay.Enum.TraceMask,System.IntPtr)">
            <summary>
            Performs a trace from origin to end with specified mask and content flags (both as TraceMask)
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.Contents,CS2TraceRay.Enum.TraceMask,System.IntPtr)">
            <summary>
            Performs a trace from origin to end with specified mask (as Contents) and content (as TraceMask)
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.TraceMask,CS2TraceRay.Enum.TraceMask,CounterStrikeSharp.API.Core.CCSPlayerController)">
            <summary>
            Performs a trace from origin to end with specified mask and content flags (both as TraceMask), skipping a player controller
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.TraceMask,CS2TraceRay.Enum.TraceMask,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin to end with specified mask and content flags (both as TraceMask), skipping a player pawn
            </summary>
        </member>
        <member name="M:CS2TraceRay.Class.TraceRay.TraceShape(CounterStrikeSharp.API.Modules.Utils.Vector,CounterStrikeSharp.API.Modules.Utils.Vector,CS2TraceRay.Enum.Contents,CS2TraceRay.Enum.TraceMask,CounterStrikeSharp.API.Core.CCSPlayerPawn)">
            <summary>
            Performs a trace from origin to end with specified mask (as Contents) and content (as TraceMask), skipping a player pawn
            </summary>
        </member>
        <member name="T:CS2TraceRay.Enum.Contents">
            <summary>
            Bitmask flags representing collision layers and content types in CS2.
            Used for trace operations to filter what should be hit.
            </summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.Empty">
            <summary>Empty</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.Solid">
            <summary>Solid</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.Hitbox">
            <summary>Hitbox</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.Trigger">
            <summary>Trigger</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.Sky">
            <summary>Sky</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.PlayerClip">
            <summary>PlayerClip</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.NpcClip">
            <summary>NpcClip</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.BlockLos">
            <summary>BlockLos</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.BlockLight">
            <summary>BlockLight</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.Ladder">
            <summary>Ladder</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.Pickup">
            <summary>Pickup</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.BlockSound">
            <summary>BlockSound</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.NoDraw">
            <summary>NoDraw</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.Window">
            <summary>Window</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.PassBullets">
            <summary>PassBullets</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.WorldGeometry">
            <summary>WorldGeometry</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.Water">
            <summary>Water</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.Slime">
            <summary>Slime</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.TouchAll">
            <summary>TouchAll</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.Player">
            <summary>Player</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.Npc">
            <summary>Npc</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.Debris">
            <summary>Debris</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.PhysicsProp">
            <summary>PhysicsProp</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.NavIgnore">
            <summary>NavIgnore</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.NavLocalIgnore">
            <summary>NavLocalIgnore</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.PostProcessingVolume">
            <summary>PostProcessingVolume</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.UnusedLayer3">
            <summary>UnusedLayer3</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.CarriedObject">
            <summary>CarriedObject</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.Pushaway">
            <summary>Pushaway</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.ServerEntityOnClient">
            <summary>ServerEntityOnClient</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.CarriedWeapon">
            <summary>CarriedWeapon</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.StaticLevel">
            <summary>StaticLevel</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.CsgoTeam1">
            <summary>CsgoTeam1</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.CsgoTeam2">
            <summary>CsgoTeam2</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.CsgoGrenadeClip">
            <summary>CsgoGrenadeClip</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.CsgoDroneClip">
            <summary>CsgoDroneClip</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.CsgoMoveable">
            <summary>CsgoMoveable</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.CsgoOpaque">
            <summary>CsgoOpaque</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.CsgoMonster">
            <summary>CsgoMonster</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.CsgoUnusedLayer">
            <summary>CsgoUnusedLayer</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.Contents.CsgoThrownGrenade">
            <summary>CsgoThrownGrenade</summary>
        </member>
        <member name="T:CS2TraceRay.Enum.CsgoLayerIndex">
            <summary>
            Specific layer indices used for content masking
            </summary>
        </member>
        <member name="F:CS2TraceRay.Enum.CsgoLayerIndex.Team1">
            <summary>Team 1 layer</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.CsgoLayerIndex.Team2">
            <summary>Team 2 layer</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.CsgoLayerIndex.GrenadeClip">
            <summary>Grenade collision layer</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.CsgoLayerIndex.DroneClip">
            <summary>Drone collision layer</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.CsgoLayerIndex.Moveable">
            <summary>Movable physics objects layer</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.CsgoLayerIndex.Opaque">
            <summary>Opaque surfaces layer</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.CsgoLayerIndex.Monster">
            <summary>Monster/NPC layer</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.CsgoLayerIndex.UnusedLayer">
            <summary>Unused/reserved layer</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.CsgoLayerIndex.ThrownGrenade">
            <summary>Thrown grenade entities layer</summary>
        </member>
        <member name="T:CS2TraceRay.Enum.DesignerNameMatchType">
            <summary>
            Specifies the type of matching to perform on the designer name.
            </summary>
        </member>
        <member name="F:CS2TraceRay.Enum.DesignerNameMatchType.Equals">
            <summary>
            Matches if the designer name is exactly equal to the specified string.
            </summary>
        </member>
        <member name="F:CS2TraceRay.Enum.DesignerNameMatchType.StartsWith">
            <summary>
            Matches if the designer name starts with the specified string.
            </summary>
        </member>
        <member name="F:CS2TraceRay.Enum.DesignerNameMatchType.EndsWith">
            <summary>
            Matches if the designer name ends with the specified string.
            </summary>
        </member>
        <member name="T:CS2TraceRay.Enum.LayerIndex">
            <summary>
            Defines base layer indices used for collision detection and tracing
            </summary>
        </member>
        <member name="F:CS2TraceRay.Enum.LayerIndex.Solid">
            <summary>Solid objects layer</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.LayerIndex.Hitbox">
            <summary>Hitbox collision layer</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.LayerIndex.Trigger">
            <summary>Trigger volume layer</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.LayerIndex.Sky">
            <summary>Skybox layer</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.LayerIndex.FirstUser">
            <summary>First available layer for user-defined content</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.LayerIndex.NotFound">
            <summary>Special value indicating layer not found</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.LayerIndex.MaxAllowed">
            <summary>Maximum allowed layer index</summary>
        </member>
        <member name="T:CS2TraceRay.Enum.StandardLayerIndex">
            <summary>
            Standard layer indices used for content masking
            </summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.PlayerClip">
            <summary>PlayerClip</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.NpcClip">
            <summary>NpcClip</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.BlockLos">
            <summary>BlockLos</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.BlockLight">
            <summary>BlockLight</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.Ladder">
            <summary>Ladder</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.Pickup">
            <summary>Pickup</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.BlockSound">
            <summary>BlockSound</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.NoDraw">
            <summary>NoDraw</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.Window">
            <summary>Window</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.PassBullets">
            <summary>PassBullets</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.WorldGeometry">
            <summary>WorldGeometry</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.Water">
            <summary>Water</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.Slime">
            <summary>Slime</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.TouchAll">
            <summary>TouchAll</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.Player">
            <summary>Player</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.Npc">
            <summary>Npc</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.Debris">
            <summary>Debris</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.PhysicsProp">
            <summary>PhysicsProp</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.NavIgnore">
            <summary>NavIgnore</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.NavLocalIgnore">
            <summary>NavLocalIgnore</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.PostProcessingVolume">
            <summary>PostProcessingVolume</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.UnusedLayer3">
            <summary>UnusedLayer3</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.CarriedObject">
            <summary>CarriedObject</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.Pushaway">
            <summary>Pushaway</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.ServerEntityOnClient">
            <summary>ServerEntityOnClient</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.CarriedWeapon">
            <summary>CarriedWeapon</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.StaticLevel">
            <summary>StaticLevel</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.StandardLayerIndex.FirstModSpecific">
            <summary>FirstModSpecific</summary>
        </member>
        <member name="T:CS2TraceRay.Enum.TraceMask">
            <summary>
            Predefined trace masks for common collision detection scenarios
            </summary>
        </member>
        <member name="F:CS2TraceRay.Enum.TraceMask.MaskAll">
            <summary>Matches everything</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.TraceMask.MaskSolid">
            <summary>Everything that is normally solid</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.TraceMask.MaskPlayerSolid">
            <summary>Everything that blocks player movement</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.TraceMask.MaskNpcSolid">
            <summary>Blocks NPC movement</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.TraceMask.MaskNpcFluid">
            <summary>Blocks fluid movement</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.TraceMask.MaskWater">
            <summary>Water physics contents</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.TraceMask.MaskShot">
            <summary>Contents that bullets see as solid</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.TraceMask.MaskShotBrushOnly">
            <summary>Bullet collision (world+brush only, no monsters)</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.TraceMask.MaskShotHull">
            <summary>Non-raycasted weapons collision (includes grates)</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.TraceMask.MaskShotPortal">
            <summary>Portal gun trace collision</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.TraceMask.MaskSolidBrushOnly">
            <summary>Solid contents (world+brush only, no monsters)</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.TraceMask.MaskPlayerSolidBrushOnly">
            <summary>Player movement collision (world+brush only, no monsters)</summary>
        </member>
        <member name="F:CS2TraceRay.Enum.TraceMask.MaskNpcSolidBrushOnly">
            <summary>NPC movement collision (world+brush only, no monsters)</summary>
        </member>
    </members>
</doc>
